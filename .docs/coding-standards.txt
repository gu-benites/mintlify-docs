# AromaCHAT Go - Coding Standards

## Overview

This document establishes the coding standards and best practices for AromaCHAT Go development. These standards ensure code consistency, maintainability, and alignment with our premium mobile experience goals.

## Core Principles

### 1. Content-First Development
- Prioritize functionality and user experience over technical complexity
- Write code that serves the content and user interface directly
- Avoid over-engineering or premature optimization

### 2. Theme-Driven Architecture
- **NEVER hardcode colors, spacing, or typography values**
- Always use `usePaperTheme()` and `useTheme()` hooks
- **[DEPRECATED]** `useDesignTokens()` is deprecated. Use `useTheme()` instead.
- All styling must derive from the centralized theme system
- Forbidden: `StyleSheet.create()` with static values

### 3. Mobile-First Performance
- Target 60fps animations across all interactions
- Optimize for mobile device constraints (memory, battery, network)
- Use React Native Reanimated for all animations
- Implement proper image optimization and lazy loading

## React Native & TypeScript Standards

### File Organization
```
src/
├── app/              # Expo Router screens (kebab-case)
├── shared/           # Shared utilities and components
│   ├── components/   # Reusable UI components
│   ├── hooks/        # Custom React hooks
│   ├── services/     # API clients and external integrations
│   ├── styles/       # Theme system and design tokens
│   └── utils/        # Pure utility functions
└── features/         # Feature-specific modules
```

### Naming Conventions
- **Files**: kebab-case (`user-profile.tsx`, `create-recipe.tsx`)
- **Components**: PascalCase (`UserProfile`, `CreateRecipeWizard`)
- **Functions/Variables**: camelCase (`handleSubmit`, `isLoading`)
- **Constants**: SCREAMING_SNAKE_CASE (`API_BASE_URL`, `MAX_FILE_SIZE`)
- **Types/Interfaces**: PascalCase with descriptive names (`UserProfile`, `RecipeWizardStep`)

### Component Structure
```tsx
// 1. External imports
import React from 'react';
import { View } from 'react-native';
import { Button, Text } from 'react-native-paper';

// 2. Internal imports (absolute paths)
import { usePaperTheme, useTheme } from '@/shared/hooks';
import { ScreenWrapper } from '@/shared/components/layout';

// 3. Types (if not in separate file)
interface Props {
  title: string;
  onSubmit: () => void;
}

// 4. Component implementation
export function MyComponent({ title, onSubmit }: Props) {
  const theme = usePaperTheme();
  const tokens = useTheme(); // Use useTheme() instead of deprecated useDesignTokens()

  return (
    <ScreenWrapper>
      <View style={{ padding: tokens.spacing.lg }}>
        <Text variant="headlineSmall" style={{ color: theme.colors.onSurface }}>
          {title}
        </Text>
        <Button mode="contained" onPress={onSubmit}>
          Submit
        </Button>
      </View>
    </ScreenWrapper>
  );
}
```

## Mandatory Patterns

### 1. ScreenWrapper Usage
```tsx
// REQUIRED: Every screen must use ScreenWrapper
<ScreenWrapper 
  showAppBar={true} 
  showBottomNav={false}
  scrollable={true}
  enableRefresh={true}
  enableModals={true}
>
  {/* Screen content */}
</ScreenWrapper>
```

### 2. Theme System Integration
```tsx
// CORRECT: Use theme hooks
const theme = usePaperTheme();
const tokens = useTheme(); // Use useTheme() instead of deprecated useDesignTokens()

const styles = {
  container: {
    backgroundColor: theme.colors.surface,
    padding: tokens.spacing.lg,
    borderRadius: tokens.radius.md,
  }
};

// FORBIDDEN: Hardcoded values
const styles = StyleSheet.create({
  container: {
    backgroundColor: '#ffffff', // ❌ NEVER hardcode colors
    padding: 16,                // ❌ Use tokens.spacing.lg
    borderRadius: 8,            // ❌ Use tokens.radius.md
  }
});
```

### 3. Modal System Implementation
```tsx
// CORRECT: Use custom Instagram-style modals
import { useModal } from '@/shared/hooks/use-modal';

const { showModal } = useModal();

const handleOpenModal = () => {
  showModal('profile', { userId: '123' });
};

// FORBIDDEN: React Native Paper modals
import { Modal } from 'react-native-paper'; // ❌ NEVER use RN Paper modals
```

### 4. Haptic Feedback Integration
```tsx
import { triggerHaptic } from '@/shared/utils/haptics';

const handleButtonPress = () => {
  triggerHaptic('impact', 'medium'); // ✅ Add haptic feedback
  onPress();
};
```

## Accessibility Standards

### Touch Targets
- **Minimum size**: 44x44px for all interactive elements
- Use `TouchableRipple` for consistent feedback
- Ensure proper `accessibilityLabel` and `accessibilityHint`

### Color Contrast
- Follow WCAG 2.1 AA guidelines
- Use theme colors that automatically provide proper contrast
- Test in both light and dark modes

### Screen Reader Support
```tsx
<TouchableRipple
  onPress={handlePress}
  accessibilityLabel="Create new recipe"
  accessibilityHint="Opens the recipe creation wizard"
  accessibilityRole="button"
>
  <Text>Create Recipe</Text>
</TouchableRipple>
```

## Internationalization (i18n)

### Namespace-Based Structure
```tsx
import { useTranslation } from 'react-i18next';

function CreateRecipeScreen() {
  const { t } = useTranslation('createRecipe');
  
  return (
    <Text>{t('common:welcome')}</Text> // Cross-namespace reference
  );
}
```

### Translation Key Conventions
- Use descriptive, hierarchical keys: `createRecipe.steps.healthConcern.title`
- Avoid abbreviations: `button.submit` not `btn.sub`
- Group related translations by feature/screen

## State Management with Zustand

### Store Structure
```tsx
import { create } from 'zustand';

interface RecipeState {
  currentStep: number;
  healthConcern: string;
  isLoading: boolean;
  
  // Actions
  setCurrentStep: (step: number) => void;
  updateHealthConcern: (concern: string) => void;
  resetWizard: () => void;
}

export const useRecipeStore = create<RecipeState>((set) => ({
  currentStep: 0,
  healthConcern: '',
  isLoading: false,
  
  setCurrentStep: (step) => set({ currentStep: step }),
  updateHealthConcern: (concern) => set({ healthConcern: concern }),
  resetWizard: () => set({ currentStep: 0, healthConcern: '', isLoading: false }),
}));
```

## Error Handling

### API Error Handling
```tsx
try {
  const response = await apiClient.createRecipe(data);
  return response;
} catch (error) {
  // Log to Sentry
  Sentry.captureException(error);
  
  // Show user-friendly error
  showToast(t('errors.networkError'));
  
  throw error; // Re-throw for component handling
}
```

### Component Error Boundaries
```tsx
import { ErrorBoundary } from 'react-error-boundary';

function ErrorFallback({ error, resetErrorBoundary }: ErrorFallbackProps) {
  return (
    <View style={{ padding: tokens.spacing.lg }}>
      <Text variant="headlineSmall">{t('errors.something_went_wrong')}</Text>
      <Button onPress={resetErrorBoundary}>
        {t('common.retry')}
      </Button>
    </View>
  );
}

// Wrap components
<ErrorBoundary FallbackComponent={ErrorFallback}>
  <MyComponent />
</ErrorBoundary>
```

## Performance Guidelines

### Component Optimization
```tsx
import { memo, useCallback, useMemo } from 'react';

export const MyComponent = memo(function MyComponent({ data, onPress }: Props) {
  const processedData = useMemo(() => {
    return data.map(item => ({ ...item, processed: true }));
  }, [data]);

  const handlePress = useCallback((id: string) => {
    onPress(id);
  }, [onPress]);

  return (
    // Component JSX
  );
});
```

### Image Optimization
```tsx
import { Image } from 'expo-image';

// PREFERRED: Use Expo Image with optimization
<Image
  source={{ uri: imageUrl }}
  style={{ width: 200, height: 200 }}
  contentFit="cover"
  transition={200}
  placeholder={{ blurhash: 'L6PZfSi_.AyE_3t7t7R**0o#DgR4' }}
/>
```

## Testing Standards

### Component Testing Pattern
```tsx
import { render, screen, fireEvent } from '@testing-library/react-native';
import { TestProviders } from '@/shared/test-utils';
import { MyComponent } from './my-component';

describe('MyComponent', () => {
  it('renders correctly with required props', () => {
    render(
      <TestProviders>
        <MyComponent title="Test Title" onPress={jest.fn()} />
      </TestProviders>
    );
    
    expect(screen.getByText('Test Title')).toBeTruthy();
  });

  it('calls onPress when button is pressed', () => {
    const mockOnPress = jest.fn();
    
    render(
      <TestProviders>
        <MyComponent title="Test" onPress={mockOnPress} />
      </TestProviders>
    );
    
    fireEvent.press(screen.getByRole('button'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
});
```

## Code Review Checklist

### Before Submitting PR
- [ ] ScreenWrapper used on all screens
- [ ] No hardcoded colors, spacing, or typography
- [ ] Theme hooks used correctly (`usePaperTheme`, `useTheme()`)
- [ ] Custom modals used (never RN Paper modals)
- [ ] Haptic feedback implemented for interactions
- [ ] Accessibility labels and hints provided
- [ ] Touch targets meet 44px minimum
- [ ] i18n translations implemented
- [ ] Error boundaries and error handling implemented
- [ ] Component is properly memoized if needed
- [ ] Tests written for new functionality

### Performance Checks
- [ ] No unnecessary re-renders
- [ ] Images optimized with Expo Image
- [ ] Large lists use FlatList with proper optimization
- [ ] Animations maintain 60fps
- [ ] Bundle impact assessed for new dependencies

## Security Guidelines

### Sensitive Data Handling
- Never log sensitive user data
- Use Expo SecureStore for secure storage
- Sanitize user inputs before processing
- Follow OWASP mobile security guidelines

### API Security
```tsx
// Secure API configuration
const apiClient = axios.create({
  baseURL: process.env.EXPO_PUBLIC_API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add auth token interceptor
apiClient.interceptors.request.use((config) => {
  const token = getAuthToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});
```

## Documentation Standards

### Component Documentation
```tsx
/**
 * RecipeWizardStep component for the aromatherapy recipe creation flow.
 * 
 * @param title - The step title displayed to the user
 * @param description - Optional description for additional context
 * @param onNext - Callback fired when user proceeds to next step
 * @param onPrevious - Callback fired when user goes back
 * @param isLoading - Whether the step is in a loading state
 * 
 * @example
 * <RecipeWizardStep
 *   title="Health Concern"
 *   description="Tell us about your concern"
 *   onNext={handleNext}
 *   onPrevious={handlePrevious}
 *   isLoading={false}
 * />
 */
```

### README Updates
- Document new features and their usage
- Include setup instructions for new dependencies
- Provide examples for complex components
- Update troubleshooting section as needed

---

**This document is living and should be updated as the codebase evolves. All team members are responsible for maintaining these standards.**