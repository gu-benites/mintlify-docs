# AromaCHAT Go - Source Tree Organization

## Overview

This document provides a comprehensive guide to the AromaCHAT Go source code organization, file structure, and architectural patterns. It serves as a map for developers to understand where code lives and how modules are organized.

## Root Directory Structure

```
aromachat/
├── .bmad-core/                 # BMad development framework (dev tools only)
├── .claude/                    # Claude Code configuration
├── .github/                    # GitHub workflows and templates
├── .kiro/                      # Legacy project documentation
├── .serena/                    # Code analysis tools
├── assets/                     # Static assets (images, fonts, sounds)
│   ├── icon.png               # App icon
│   ├── splash.png             # Splash screen
│   ├── adaptive-icon.png      # Android adaptive icon
│   └── favicon.png            # Web favicon
├── docs/                      # Project documentation
│   ├── architecture/          # Architecture documentation
│   ├── aromachat-macro-prd.md # Product requirements
│   └── brownfield-architecture.md # Current system documentation
├── scripts/                   # Build and utility scripts
│   ├── list-orphans.sh       # Find unused files
│   ├── clean-orphans.sh      # Remove unused files
│   └── ...
├── src/                       # Main source code
├── tasks/                     # Development tasks and workflows
├── template-projects/         # Reference implementations
├── app.json                   # Expo configuration
├── eas.json                   # EAS Build configuration
├── eslint.config.js          # ESLint configuration
├── metro.config.js           # Metro bundler configuration
├── package.json              # Dependencies and scripts
├── tsconfig.json             # TypeScript configuration
└── .env.example              # Environment variables template
```

## Source Code Organization (`src/`)

### Top-Level Source Structure

```
src/
├── app/                       # Expo Router screens and layouts
├── shared/                    # Shared utilities and components
├── features/                  # Feature-specific modules
└── context/                   # Documentation and design guidelines
```

## App Directory (`src/app/`)

File-based routing structure using Expo Router with TypeScript support.

```
src/app/
├── _layout.tsx               # Root layout with providers
├── index.tsx                 # Landing page / redirect logic
├── (auth)/                   # Authentication route group
│   ├── _layout.tsx          # Auth layout wrapper
│   ├── welcome.tsx          # Welcome/onboarding screen
│   ├── sign-in.tsx          # Sign in screen
│   └── sign-up.tsx          # Sign up screen
└── (tabs)/                   # Main app route group
    ├── _layout.tsx          # Tab layout with bottom navigation
    ├── index.tsx            # Home/dashboard screen
    ├── oil-dilution-calculator.tsx # Oil calculator tool
    ├── create-recipe/       # Recipe creation wizard
    │   ├── _layout.tsx      # Wizard layout
    │   ├── index.tsx        # Wizard entry point
    │   ├── health-concern.tsx # Step 1: Health concern input
    │   ├── demographics.tsx  # Step 2: User demographics
    │   ├── causes.tsx       # Step 3: Potential causes selection
    │   ├── symptoms.tsx     # Step 4: Symptoms selection
    │   ├── properties.tsx   # Step 5: Therapeutic properties
    │   └── final-recipes.tsx # Step 6: Generated recipes
    └── demo/                # Development demo screens
        ├── haptics-demo.tsx # Haptic feedback testing
        ├── debug.tsx        # Debug utilities
        └── instagram-modal-debug.tsx # Modal system testing
```

### Route Group Conventions
- **Parentheses `()`**: Create route groups without affecting URL structure
- **Underscore `_`**: Private routes (not included in navigation)
- **Square brackets `[]`**: Dynamic routes with parameters

## Shared Directory (`src/shared/`)

Reusable code shared across the entire application.

```
src/shared/
├── components/               # Reusable UI components
│   ├── layout/              # Layout-related components
│   │   ├── screen-wrapper.tsx # MANDATORY screen container
│   │   ├── app-bar.tsx      # Custom app bar component
│   │   ├── bottom-navigation.tsx # Tab navigation
│   │   └── index.ts         # Barrel exports
│   ├── modals/              # Custom modal system
│   │   ├── base-modal.tsx   # Core modal implementation
│   │   ├── specific-modals.tsx # Pre-built modal variants
│   │   ├── profile-modal-content.tsx # Profile modal
│   │   └── index.ts         # Barrel exports
│   └── index.ts             # Main component exports
├── contexts/                # React contexts
│   └── user-preferences-context.tsx # User preferences
├── hooks/                   # Custom React hooks
│   ├── use-theme.ts         # Theme access hook
│   ├── use-design-tokens.ts # Design tokens hook
│   ├── use-modal.ts         # Modal system hook
│   ├── use-language.ts      # i18n language hook
│   ├── use-ai-streaming.ts  # AI streaming responses
│   ├── use-pull-to-refresh.ts # Pull-to-refresh functionality
│   ├── use-feature-flags.ts # Feature flags management
│   └── index.ts             # Hook exports
├── locales/                 # Internationalization
│   ├── i18n.ts             # i18n configuration
│   ├── index.ts            # Locale exports
│   ├── en/                 # English translations
│   │   ├── index.ts        # English exports
│   │   ├── common.json     # Common translations
│   │   ├── auth.json       # Authentication terms
│   │   ├── create-recipe.json # Recipe creation flow
│   │   ├── homescreen.json # Home screen content
│   │   ├── onboarding.json # Onboarding flow
│   │   └── oil-calculator.json # Calculator terms
│   └── pt/                 # Portuguese translations
│       ├── index.ts        # Portuguese exports
│       ├── common.json     # Common translations
│       ├── auth.json       # Authentication terms
│       ├── create-recipe.json # Recipe creation flow
│       ├── homescreen.json # Home screen content
│       ├── onboarding.json # Onboarding flow
│       └── oil-calculator.json # Calculator terms
├── providers/              # React context providers
│   ├── modal-provider.tsx  # Modal system provider
│   ├── haptics-provider.tsx # Haptic feedback provider
│   └── index.ts            # Provider exports
├── services/               # External service integrations
│   ├── api/                # API clients
│   │   ├── rotinanatural-client.ts # Main API client
│   │   └── index.ts        # API exports
│   ├── integrations/       # Third-party integrations
│   │   ├── posthog-clerk-integration.tsx # Analytics integration
│   │   └── index.ts        # Integration exports
│   └── index.ts            # Service exports
├── styles/                 # Theme and styling system
│   ├── material-theme.json # Material Design 3 theme
│   ├── design-tokens.ts    # Design tokens (spacing, typography)
│   └── button-styles.ts    # Button style variants
├── utils/                  # Utility functions
│   ├── theme-utils.ts      # Theme-related utilities
│   ├── haptics.ts          # Haptic feedback utilities
│   ├── mobile-sse-client.ts # Mobile-optimized SSE client
│   ├── sse-reader.ts       # SSE stream reader
│   ├── refresh-utils.ts    # Pull-to-refresh utilities
│   ├── sentry-config.ts    # Sentry error tracking setup
│   └── index.ts            # Utility exports
└── index.ts                # Main shared exports
```

## Features Directory (`src/features/`)

Feature-specific modules that encapsulate related functionality.

```
src/features/
└── (feature modules organized by domain)
```

*Note: Currently most feature code is organized within the `app/` directory following the file-based routing structure. The `features/` directory is available for more complex feature modules that need to be shared across multiple routes.*

## Context Directory (`src/context/`)

Documentation and design guidelines that inform development decisions.

```
src/context/
├── design-principles.md     # Core design philosophy and strategic guidelines
└── aromachat_ux_guide.md   # Complete UX/UI implementation guide
```

## File Naming Conventions

### TypeScript/JavaScript Files
- **Components**: PascalCase (`UserProfile.tsx`, `CreateRecipeWizard.tsx`)
- **Screens**: kebab-case (`health-concern.tsx`, `final-recipes.tsx`)
- **Utilities**: kebab-case (`theme-utils.ts`, `mobile-sse-client.ts`)
- **Hooks**: kebab-case with `use-` prefix (`use-theme.ts`, `use-modal.ts`)
- **Services**: kebab-case (`rotinanatural-client.ts`)

### Configuration Files
- **Root config**: lowercase (`package.json`, `tsconfig.json`)
- **Expo config**: lowercase (`app.json`, `eas.json`)
- **Build config**: lowercase with dots (`metro.config.js`, `eslint.config.js`)

### Asset Files
- **Images**: kebab-case (`app-icon.png`, `splash-screen.png`)
- **Icons**: descriptive names (`chevron-right.svg`, `user-profile.svg`)

## Import Path Organization

### Absolute Imports
All imports use absolute paths from the `src/` directory:

```typescript
// ✅ Correct: Absolute imports
import { ScreenWrapper } from '@/shared/components/layout';
import { usePaperTheme } from '@/shared/hooks';
import { CreateRecipeWizard } from '@/features/recipe-creation';

// ❌ Incorrect: Relative imports
import { ScreenWrapper } from '../../../shared/components/layout';
import { usePaperTheme } from '../../hooks';
```

### Import Order Convention
```typescript
// 1. React and React Native
import React from 'react';
import { View, Text } from 'react-native';

// 2. Third-party libraries
import { Button } from 'react-native-paper';
import { useTranslation } from 'react-i18next';

// 3. Internal shared modules
import { ScreenWrapper } from '@/shared/components/layout';
import { usePaperTheme, useDesignTokens } from '@/shared/hooks';

// 4. Feature-specific imports
import { RecipeStep } from '@/features/recipe-creation';

// 5. Type-only imports (if not inline)
import type { RecipeWizardProps } from './types';
```

## Barrel Exports Pattern

Each directory includes an `index.ts` file for clean imports:

```typescript
// src/shared/components/layout/index.ts
export { ScreenWrapper } from './screen-wrapper';
export { AppBar } from './app-bar';
export { BottomNavigation } from './bottom-navigation';

// Usage
import { ScreenWrapper, AppBar } from '@/shared/components/layout';
```

## Code Organization Principles

### 1. Feature-Based Organization
- Related functionality grouped together
- Clear boundaries between features
- Shared code in dedicated `shared/` directory

### 2. Layered Architecture
```
Presentation Layer:    src/app/ (screens and UI)
                      ↓
Business Logic Layer:  src/shared/hooks/ src/features/
                      ↓
Service Layer:        src/shared/services/
                      ↓
Utility Layer:        src/shared/utils/
```

### 3. Dependency Direction
- Higher layers depend on lower layers
- No circular dependencies
- Shared code doesn't depend on feature code
- Features can depend on shared code

### 4. Single Responsibility
- Each file has a clear, single purpose
- Components focus on UI presentation
- Hooks handle business logic and state
- Services manage external integrations
- Utils provide pure functions

## Module Resolution Configuration

### TypeScript Path Mapping
```json
// tsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@/shared/*": ["src/shared/*"],
      "@/features/*": ["src/features/*"],
      "@/app/*": ["src/app/*"]
    }
  }
}
```

### Metro Bundler Configuration
```javascript
// metro.config.js
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

config.resolver.alias = {
  '@': './src',
};

module.exports = config;
```

## Architecture Patterns

### 1. Container/Presentation Pattern
```typescript
// Container component (logic)
function CreateRecipeContainer() {
  const [step, setStep] = useState(0);
  const { data, isLoading } = useRecipeWizard();
  
  return (
    <CreateRecipePresentation
      step={step}
      data={data}
      isLoading={isLoading}
      onNext={() => setStep(step + 1)}
    />
  );
}

// Presentation component (UI)
function CreateRecipePresentation({ step, data, isLoading, onNext }) {
  return (
    <ScreenWrapper>
      {/* UI implementation */}
    </ScreenWrapper>
  );
}
```

### 2. Hook-Based Logic Extraction
```typescript
// Custom hook for business logic
function useRecipeWizard() {
  const [currentStep, setCurrentStep] = useState(0);
  const [wizardData, setWizardData] = useState({});
  
  const nextStep = useCallback(() => {
    setCurrentStep(prev => prev + 1);
  }, []);
  
  return {
    currentStep,
    wizardData,
    nextStep,
    // ... other logic
  };
}

// Component uses hook
function RecipeWizardScreen() {
  const { currentStep, wizardData, nextStep } = useRecipeWizard();
  
  return (
    // UI implementation
  );
}
```

### 3. Service Layer Pattern
```typescript
// Service interface
interface ApiClient {
  createRecipe(data: RecipeData): Promise<Recipe>;
  getRecipe(id: string): Promise<Recipe>;
}

// Service implementation
class RotinanaturalClient implements ApiClient {
  async createRecipe(data: RecipeData): Promise<Recipe> {
    // Implementation
  }
}

// Service usage in hook
function useRecipeCreation() {
  const apiClient = useApiClient();
  
  const createRecipe = useCallback(async (data: RecipeData) => {
    return await apiClient.createRecipe(data);
  }, [apiClient]);
  
  return { createRecipe };
}
```

## Quality Assurance

### File Organization Checklist
- [ ] Files are in appropriate directories
- [ ] Naming conventions followed
- [ ] Barrel exports provided where needed
- [ ] No circular dependencies
- [ ] Import order conventions followed
- [ ] Absolute imports used

### Architecture Review Points
- [ ] Clear separation of concerns
- [ ] Proper dependency direction
- [ ] Business logic extracted to hooks
- [ ] UI components are presentational
- [ ] Services handle external concerns
- [ ] Utilities are pure functions

---

**This source tree organization supports AromaCHAT Go's goals of maintainability, scalability, and developer productivity while enforcing architectural best practices.**